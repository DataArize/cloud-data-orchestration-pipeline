name: INFRASTRUCTURE-PROVISIONING
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Infrastructure Setup'
    runs-on: ubuntu-latest
    env:
      TF_VAR_environment: ${{ secrets.ENVIRONMENT }}
      TF_VAR_logging_bucket: ${{ secrets.LOGGING_BUCKET_NAME }}
      TF_VAR_storage_bucket: ${{ secrets.STORAGE_BUCKET_NAME }}
      TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
      TF_VAR_project_region: ${{ secrets.PROJECT_REGION }}
      TF_VAR_dataflow_bucket: ${{ secrets.DATAFLOW_BUCKET_NAME }}
      TF_VAR_dataset_name: ${{ secrets.BIGQUERY_DATASET_NAME }}
      TF_VAR_service_account_name: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      TF_VAR_table_name: ${{ secrets.BIGQUERY_TABLE_NAME }}
      TF_VAR_owner_email: ${{ secrets.BIGQUERY_TABLE_OWNER }}
      TF_VAR_composer_name: ${{ secrets.COMPOSER_NAME }}
      TF_VAR_composer_bucket: ${{ secrets.COMPOSER_BUCKET_NAME }}
      TF_VAR_repository_name: ${{ secrets.REPOSITORY_NAME }}
      TF_VAR_cluster_namespace: ${{ secrets.CLUSTER_NAMESPACE }}
      TF_VAR_cluster_service_account_name: ${{ secrets.CLUSTER_SERVICE_ACCOUNT_NAME }}
      TF_VAR_artifactory_image_name: ${{ secrets.GCP_ARTIFACTORY_IMAGE_NAME }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_FEDERATION }}

      - name: Set Directory Based on Branch
        id: setdir
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DIR=./terraform/environments/development" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "DIR=./terraform/environments/development" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
            echo "DIR=./terraform/environments/development" >> $GITHUB_ENV
          else
            echo "DIR=./terraform/environments/development" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        working-directory: ${{ env.DIR }}
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.DIR }}
        run: terraform plan -out=tfplan -detailed-exitcode

      - name: Terraform Apply
        working-directory: ${{ env.DIR }}
        run: |
          terraform apply -auto-approve tfplan
          FULL_CLUSTER_NAME=$(terraform output -raw cluster_name)
          CLUSTER_NAME=$(echo "$FULL_CLUSTER_NAME" | awk -F'/' '{print $NF}')
          echo "Cluster name is: $CLUSTER_NAME"
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Check Active Account
        run: gcloud auth list

      - name: Docker Auth
        run: |-
          gcloud auth configure-docker ${{ secrets.PROJECT_REGION }}-docker.pkg.dev --quiet

      - name: Build image
        run: docker build ./dataflow/src/ --file ./dataflow/src/Dockerfile --tag ${{ secrets.GCP_ARTIFACTORY_IMAGE_NAME }}

      - name: Push image
        run: docker push ${{ secrets.GCP_ARTIFACTORY_IMAGE_NAME  }}

      - name: Transfer dag code to cloud storage
        run: |
          gsutil -m cp ./airflow/dags/data_pipeline_dag.py gs://${{ secrets.COMPOSER_BUCKET_NAME }}/dags

      - name: GKE auth
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ secrets.PROJECT_REGION }}

      - name: Create Namespace and Service Account
        run: |
          if ! kubectl get namespace "${{ secrets.CLUSTER_NAMESPACE }}" > /dev/null 2>&1; then
            echo "Namespace ${{ secrets.CLUSTER_NAMESPACE }} does not exist. Creating it..."
            kubectl create namespace "${{ secrets.CLUSTER_NAMESPACE }}"
          else
            echo "Namespace ${{ secrets.CLUSTER_NAMESPACE }} already exists."
          fi

          if ! kubectl get serviceaccount "${{ secrets.CLUSTER_SERVICE_ACCOUNT_NAME }}" --namespace "${{ secrets.CLUSTER_NAMESPACE }}" > /dev/null 2>&1; then
            echo "Service account ${{ secrets.CLUSTER_SERVICE_ACCOUNT_NAME }} does not exist in namespace ${{ secrets.CLUSTER_NAMESPACE }}. Creating it..."
            kubectl create serviceaccount "${{ secrets.CLUSTER_SERVICE_ACCOUNT_NAME }}" --namespace "${{ secrets.CLUSTER_NAMESPACE }}"
          else
            echo "Service account ${{ secrets.CLUSTER_SERVICE_ACCOUNT_NAME }} already exists in namespace ${{ secrets.CLUSTER_NAMESPACE }}."
          fi
      

